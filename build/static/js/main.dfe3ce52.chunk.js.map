{"version":3,"sources":["components/AppHeader.js","components/TodoButton.js","components/Todo.js","components/TodoList.js","components/NewTodo.js","App.js","serviceWorker.js","index.js"],"names":["AppHeader","props","className","TodoButton","completed","onClick","actions","delete","todoId","type","markComplete","Todo","todo","title","id","TodoList","filteredTodos","todos","filter","Fragment","headline","map","key","NewTodo","state","input","handleInputChange","bind","saveTodo","evt","this","setState","target","value","onSaveTodo","preventDefault","onSubmit","htmlFor","onChange","React","Component","App","handleDelete","handleMarkCompleted","handleSaveTodo","todoActions","fetch","then","res","json","todoText","Math","max","o","currentState","concat","userId","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dfe3ce52.chunk.js","sourcesContent":["import React from 'react';\n\nfunction AppHeader(props) {\n    return (\n        <div className=\"jumbotron\">\n          <h1 className=\"display-4\">React Todos</h1>\n          <p className=\"lead\">This is a simple React based Todo App.</p>\n        </div>\n    );\n}\n\nexport default AppHeader;","import React from 'react';\n\nfunction TodoButton(props) {\n    if (props.completed === true) {\n        return <button onClick={() => props.actions.delete(props.todoId)} type=\"button\" className=\"btn btn-danger\">Delete</button>;\n    } else {\n        return <button onClick={() => props.actions.markComplete(props.todoId)} type=\"button\" className=\"btn btn-primary\">Complete</button>;\n    }\n}\n\nexport default TodoButton;","import React from 'react';\nimport './Todo.css';\nimport TodoButton from './TodoButton';\n\nfunction Todo(props) {\n    return <div className=\"todo-wrapper\"><span>{props.todo.title}</span><TodoButton todoId={props.todo.id} actions={props.actions} completed={props.todo.completed} /></div>;\n}\n\nexport default Todo;","import React from 'react';\nimport Todo from './Todo';\n\nfunction TodoList(props) {\n    const filteredTodos = props.todos.filter(todo => todo.completed === props.completed);\n\n    return (\n        <React.Fragment>\n            <h2>{props.headline}</h2>\n            <ul className=\"list-group\">\n                {filteredTodos.map(todo => {\n                    return (\n                        <li key={todo.id} className=\"list-group-item\">\n                            <Todo todo={todo} actions={props.actions} />\n                        </li>\n                    );\n                })}\n            </ul>\n        </React.Fragment>\n    );\n}\n\nexport default TodoList;","import React from 'react';\n\nclass NewTodo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {input: ''};\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.saveTodo = this.saveTodo.bind(this);\n    }\n\n    handleInputChange(evt) {\n        this.setState({\n            input: evt.target.value\n        });\n    }\n\n    saveTodo(evt) {\n        //console.log('save todo');\n        this.props.onSaveTodo(this.state.input);\n        this.setState({input: ''});\n        evt.preventDefault();\n    }\n\n    render(){\n        return (\n            <div className=\"jumbotron\">\n            <form onSubmit={this.saveTodo}>\n                <div className=\"form-group\">\n                    <label htmlFor=\"todoInput\">New Todo</label>\n                    <input onChange={this.handleInputChange} value={this.state.input} type=\"text\" className=\"form-control\" id=\"todoInput\" />\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary\">Save Todo</button>\n            </form>\n            </div>\n        );\n    }\n}\n\nexport default NewTodo;","import React from 'react';\nimport './App.css';\nimport AppHeader from './components/AppHeader';\nimport TodoList from './components/TodoList';\nimport NewTodo from './components/NewTodo';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {todos: []};\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleMarkCompleted = this.handleMarkCompleted.bind(this);\n    this.handleSaveTodo = this.handleSaveTodo.bind(this);\n  }\n\n  render() {\n    const todoActions = {\n      markComplete: this.handleMarkCompleted,\n      delete: this.handleDelete\n    };\n\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <AppHeader />\n          <NewTodo onSaveTodo={this.handleSaveTodo} />\n          <div className=\"row\">\n            <div className=\"col\">\n              <TodoList actions={todoActions} completed={false} todos={this.state.todos} headline=\"My Todos\" />\n            </div>\n            <div className=\"col\">\n              <TodoList actions={todoActions} completed={true} todos={this.state.todos} headline=\"My Completed Todos\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/todos').then(res => {\n        return res.json();\n    }).then(json => {\n        this.setState({\n            todos: json\n        });\n    });\n  }\n\n  handleSaveTodo(todoText) {\n    let todo = {\n      title: todoText,\n      completed: false,\n      id: Math.max(...this.state.todos.map(o => o.id)) + 1\n    };\n\n    this.setState(currentState => {\n      return {\n        todos: currentState.todos.concat([todo])\n      };\n    });\n  }\n\n  handleMarkCompleted(id) {\n    this.setState(currentState => {\n      const newTodos = currentState.todos.map(todo => {\n        if (todo.id === id) {\n          //Mark Complete\n          return {\n            userId: todo.userId,\n            id: todo.id,\n            title: todo.title,\n            completed: true\n          };\n        } else {\n          return todo;\n        }\n      });\n\n      return {todos: newTodos};\n    });\n  }\n\n  handleDelete(id) {\n    this.setState(currentState => {\n      return {todos: currentState.todos.filter(todo => todo.id !== id)};\n    });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}